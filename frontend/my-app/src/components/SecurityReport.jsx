import React from 'react'
import './SecurityReport.css'
import jsPDF from 'jspdf'

const SecurityReport = ({ report }) => {
  if (!report) return null

  // normalize score from 0â€“100 â†’ into 1â€“10
  const getScore10 = (score100) => {
    return Math.max(1, Math.round(score100 / 10))
  }

  // Speaks in Hindi when download starts
  const speakButtonText = () => {
    let utterance = new window.SpeechSynthesisUtterance("Download Done");
    utterance.lang = "hi-IN";
    window.speechSynthesis.speak(utterance);
  };

  const getStatusClass = (status) => {
    switch (status.toLowerCase()) {
      case 'dangerous': return 'dangerous';
      case 'suspicious': return 'suspicious';
      case 'safe': return 'safe';
      default: return 'unknown';
    }
  };

  // PDF download using jsPDF
  const downloadReport = () => {
    speakButtonText();

    const doc = new jsPDF();
    doc.setFontSize(22);
    doc.setFont("helvetica", "bold");
    doc.text("Security Analysis Report", 20, 20);

    doc.setFontSize(14);
    doc.setFont("helvetica", "normal");
    doc.text(`Domain: ${report.domain}`, 20, 36);
    doc.text(`Security Score: ${getScore10(report.securityScore)}/10`, 20, 45);
    doc.text(`Status: ${report.status}`, 20, 54);
    doc.text(`Scan Time: ${report.scanTime} seconds`, 20, 63);
    doc.text(`SSL Certificate: ${report.ssl}`, 20, 72);
    doc.text(`Registration: ${report.registration}`, 20, 81);
    doc.text(`Reputation: ${report.reputation}`, 20, 90);
    doc.text(`Server Location: ${report.location}`, 20, 99);
    doc.text(`Last Updated: ${report.lastUpdated}`, 20, 108);

    doc.setTextColor(255, 0, 0);
    if (report.detections?.positive > 0) {
      doc.text(
        `ðŸš¨ ${report.detections.positive} of ${report.detections.total} engines detected as malicious`,
        20, 120
      );
    } else {
      doc.setTextColor(34, 197, 94);
      doc.text("No malicious detections found.", 20, 120);
    }
    doc.setTextColor(0, 0, 0);

    if (report.detections?.engines?.length > 0) {
      doc.text("Security Engines That Detected Threats:", 20, 134);
      report.detections.engines.forEach((engine, i) => {
        doc.text(`- ${engine}`, 24, 142 + (i * 8));
      });
    }

    if (report.suspiciousDomains && report.suspiciousDomains.length > 0) {
      doc.text("Similar Suspicious Domains:", 20, 160);
      report.suspiciousDomains.forEach((domain, i) => {
        doc.text(`- ${domain.name} (${domain.status})`, 24, 168 + (i * 8));
      });
    }

    doc.setFontSize(10);
    doc.setTextColor(50, 50, 150);
    doc.text("Report generated by VirusTotal Â· SIH Hackathon Phishing Detection Â· Â© 2025", 20, 285);

    doc.save(`security-report-${report.domain}-${Date.now()}.pdf`);
  };

  return (
    <section className="security-report section section-white">
      <div className="container">
        <div className="report-header text-center mb-6">
          <h2>Security Analysis Report</h2>
          <p>Powered by VirusTotal - Analyzed by {report.detections?.total || 0} security engines</p>
        </div>

        <div className="report-card">
          <div className="report-main">
            <div className="score-section">
              <h3>Security Analysis Results</h3>
              <p>Scan completed in {report.scanTime} seconds</p>
              <div className="score-display">
                <div className="score-circle" style={{
                  background: `conic-gradient(${report.securityScore > 70 ? '#22c55e' : report.securityScore > 40 ? '#eab308' : '#ef4444'} 
                    0deg ${(report.securityScore / 100) * 360}deg, 
                    #e2e8f0 ${(report.securityScore / 100) * 360}deg 360deg)`
                }}>
                  <span className="score-number">{getScore10(report.securityScore)}</span>
                  <span className="score-total">/10</span>
                </div>
                <div className="score-info">
                  <div className="score-label">Security Score</div>
                  <div className={`score-status ${getStatusClass(report.status)}`}>
                    {report.status}
                  </div>
                </div>
              </div>
              {report.detections && report.detections.positive > 0 && (
                <div className="detection-summary">
                  <p className="detection-text">
                    ðŸš¨ {report.detections.positive} of {report.detections.total} security engines detected this URL as malicious
                  </p>
                </div>
              )}
            </div>

            <div className="report-details">
              <div className="details-grid">
                <div className="detail-section">
                  <h4>
                    <svg width="16" height="16" viewBox="0 0 24 24" fill="none">
                      <circle cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="2"/>
                      <line x1="12" y1="8" x2="12" y2="12" stroke="currentColor" strokeWidth="2"/>
                      <line x1="12" y1="16" x2="12.01" y2="16" stroke="currentColor" strokeWidth="2"/>
                    </svg>
                    Basic Information
                  </h4>
                  <div className="detail-item"><span>Domain:</span> <span>{report.domain}</span></div>
                  <div className="detail-item"><span>SSL Certificate:</span><span className={`status-${report.ssl === 'Valid' ? 'valid' : 'invalid'}`}>{report.ssl}</span></div>
                  <div className="detail-item"><span>Registration:</span> <span>{report.registration}</span></div>
                  <div className="detail-item"><span>Reputation:</span> <span className={`status-${report.reputation === 'Good' ? 'good' : 'poor'}`}>{report.reputation}</span></div>
                </div>
                <div className="detail-section">
                  <h4>
                    <svg width="16" height="16" viewBox="0 0 24 24" fill="none">
                      <rect x="2" y="3" width="20" height="14" rx="2" ry="2" stroke="currentColor" strokeWidth="2"/>
                      <line x1="8" y1="21" x2="16" y2="21" stroke="currentColor" strokeWidth="2"/>
                      <line x1="12" y1="17" x2="12" y2="21" stroke="currentColor" strokeWidth="2"/>
                    </svg>
                    Analysis Details
                  </h4>
                  <div className="detail-item"><span>Detections:</span> <span>{report.detections?.positive || 0}/{report.detections?.total || 0}</span></div>
                  <div className="detail-item"><span>Server Location:</span> <span>{report.location}</span></div>
                  <div className="detail-item"><span>Last Updated:</span> <span>{report.lastUpdated}</span></div>
                </div>
              </div>

              {report.detections?.engines && report.detections.engines.length > 0 && (
                <div className="detection-engines">
                  <h4>
                    <svg width="16" height="16" viewBox="0 0 24 24" fill="none">
                      <path d="M10.29 3.86L1.82 18a2 2 0 0 0 1.71 3h16.94a2 2 0 0 0 1.71-3L13.71 3.86a2 2 0 0 0-3.42 0z" stroke="currentColor" strokeWidth="2"/>
                      <line x1="12" y1="9" x2="12" y2="13" stroke="currentColor" strokeWidth="2"/>
                      <line x1="12" y1="17" x2="12.01" y2="17" stroke="currentColor" strokeWidth="2"/>
                    </svg>
                    Security Engines That Detected Threats
                  </h4>
                  <div className="engines-list">
                    {report.detections.engines.map((engine, index) => (
                      <div key={index} className="engine-item">
                        <span>{engine}</span>
                        <span className="status-detected">DETECTED</span>
                      </div>
                    ))}
                  </div>
                </div>
              )}

              {report.suspiciousDomains && report.suspiciousDomains.length > 0 && (
                <div className="suspicious-domains">
                  <h4>
                    <svg width="16" height="16" viewBox="0 0 24 24" fill="none">
                      <path d="M10.29 3.86L1.82 18a2 2 0 0 0 1.71 3h16.94a2 2 0 0 0 1.71-3L13.71 3.86a2 2 0 0 0-3.42 0z" stroke="currentColor" strokeWidth="2"/>
                      <line x1="12" y1="9" x2="12" y2="13" stroke="currentColor" strokeWidth="2"/>
                      <line x1="12" y1="17" x2="12.01" y2="17" stroke="currentColor" strokeWidth="2"/>
                    </svg>
                    Similar Suspicious Domains
                  </h4>
                  <div className="suspicious-list">
                    {report.suspiciousDomains.map((domain, index) => (
                      <div key={index} className="suspicious-item">
                        <span>{domain.name}</span>
                        <span className={`status-${domain.status.toLowerCase()}`}>
                          {domain.status}
                        </span>
                      </div>
                    ))}
                  </div>
                </div>
              )}

              <div className="report-actions">
                <button className="btn btn-primary" onClick={downloadReport}>
                  <svg width="16" height="16" viewBox="0 0 24 24" fill="none">
                    <path d="M21 15V19A2 2 0 0 1 19 21H5A2 2 0 0 1 3 19V15" stroke="currentColor" strokeWidth="2"/>
                    <polyline points="7,10 12,15 17,10" stroke="currentColor" strokeWidth="2"/>
                    <line x1="12" y1="15" x2="12" y2="3" stroke="currentColor" strokeWidth="2"/>
                  </svg>
                  Download Report as PDF
                </button>
                {report.permalink && (
                  <button
                    className="btn btn-secondary"
                    onClick={() => window.open(report.permalink, '_blank')}
                  >
                    <svg width="16" height="16" viewBox="0 0 24 24" fill="none">
                      <path d="M18 13V6A6 6 0 0 0 6 6V13" stroke="currentColor" strokeWidth="2"/>
                      <rect x="2" y="11" width="20" height="11" rx="2" ry="2" stroke="currentColor" strokeWidth="2"/>
                    </svg>
                    View Full Report
                  </button>
                )}
                <button className="btn btn-secondary" onClick={() => window.location.reload()}>
                  <svg width="16" height="16" viewBox="0 0 24 24" fill="none">
                    <path d="M3 6L5 6L21 6" stroke="currentColor" strokeWidth="2"/>
                    <path d="M19 6V20A2 2 0 0 1 17 22H7A2 2 0 0 1 5 20V6M8 6V4A2 2 0 0 1 10 2H14A2 2 0 0 1 16 4V6" stroke="currentColor" strokeWidth="2"/>
                  </svg>
                  Scan Again
                </button>
              </div>
            </div>
          </div>
        </div>
      </div>
    </section>
  )
}

export default SecurityReport
